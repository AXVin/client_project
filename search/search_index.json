{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Plans \u00b6 This is the Plan Document for the Tournament and Product Integration Database Design \u00b6 Best Suited Database Type: SQL Table Name: product_integration (Optional) Key Type Description purchase_id PRIMARY KEY Purchase ID product_id INTEGER Foreign Key to the purchased product (Optional) coupon VARCHAR A Randomly Generated key used to redeem the roles used BOOLEAN A bool to indicate if the coupon has already been used or not. Optional, could be stored on bot's database, included here for security purposes Format for coupon \u00b6 Coupon can be a hex token(4-8 bytes to keep it User-Friendly) API Design \u00b6 A RESTful API for verification of the user inputted coupon to prevent any security issues from direct access to the database Requires a valid client_id (randomly generated, token hex[16-32 bytes]) for authorization Endpoints: \u00b6 If using a subdomain for only this API, the prefix /coupon could be omitted POST /coupon/verify \u00b6 For verification of the user-inputted coupon Headers: \u00b6 Authorization: client_id Body: \u00b6 { \"coupon\" : <COUPON> } Returns: \u00b6 200 : Coupon exists in database and is valid/has not been used yet Raises: \u00b6 403 : Invalid client_id: Authorization Failed 404 : Invalid/Used coupon: The coupon does not exist or has already been used(If used is True) Backend Action: \u00b6 Check client_id and authorize ( 403 if invalid) Query database ( 404 if no record found) Check used field in row ( 404 if used is True) Return 200 POST /coupon/used \u00b6 For turning the used field in database to True after successfully assigning roles Headers: \u00b6 Authorization: client_id Body: \u00b6 { \"coupon\" : <COUPON> } Returns: \u00b6 200 : Successful Raises: \u00b6 403 : Invalid client_id: Authorization Failed 404 : Invalid/Used coupon: The coupon does not exist or has already been used(If used is True) Backend Action: \u00b6 Check client_id and authorize ( 403 if invalid) Query database ( 404 if no record found) Check used field in row ( 404 if used is True) Sets used field in the database to True Return 200 Discord Server Design \u00b6 The discord server plan where the tournament will be held Roles \u00b6 Staff Structure \u00b6 Tournament Admins - Have full access/control of server and can create bot preferences Tournament Moderators - Limited Access to the server and will maintain a link between Admins and users General \u00b6 Community / Verified - Role assigned when a coupon is successfully redeemed Tournament Participant - Role assigned once the user verifies that they want to join the tournament Channels \u00b6 welcome - Greets the new user and asks them to run the !redeem <coupon> command Access Level - Public (everyone) room-pass-and-id - Channel where the users will be informed about the Access Level - Tournament Participant(Role) Above are the required/mandatory channel(s). Rest are Optional and can be created using Channel Overrides for the Roles Bot Interface \u00b6 Prefix = ! Commands \u00b6 help : Shows the bot's commands redeem <coupon> : Grants access to the Community role !redeem <coupon> command \u00b6 Arguments: \u00b6 coupon: The coupon recieved on the purchase of the product Returns: \u00b6 Assigns role to the user on success Backend Actions: \u00b6 Takes user input Hits the /coupon/verify endpoint with client_id and coupon If successful: Assign Community/Verified Role to the user Hits the /coupon/used endpoint with client_id and coupon","title":"Home"},{"location":"#plans","text":"This is the Plan Document for the Tournament and Product Integration","title":"Plans"},{"location":"#database-design","text":"Best Suited Database Type: SQL Table Name: product_integration (Optional) Key Type Description purchase_id PRIMARY KEY Purchase ID product_id INTEGER Foreign Key to the purchased product (Optional) coupon VARCHAR A Randomly Generated key used to redeem the roles used BOOLEAN A bool to indicate if the coupon has already been used or not. Optional, could be stored on bot's database, included here for security purposes","title":"Database Design"},{"location":"#format-for-coupon","text":"Coupon can be a hex token(4-8 bytes to keep it User-Friendly)","title":"Format for coupon"},{"location":"#api-design","text":"A RESTful API for verification of the user inputted coupon to prevent any security issues from direct access to the database Requires a valid client_id (randomly generated, token hex[16-32 bytes]) for authorization","title":"API Design"},{"location":"#endpoints","text":"If using a subdomain for only this API, the prefix /coupon could be omitted","title":"Endpoints:"},{"location":"#post-couponverify","text":"For verification of the user-inputted coupon","title":"POST /coupon/verify"},{"location":"#headers","text":"Authorization: client_id","title":"Headers:"},{"location":"#body","text":"{ \"coupon\" : <COUPON> }","title":"Body:"},{"location":"#returns","text":"200 : Coupon exists in database and is valid/has not been used yet","title":"Returns:"},{"location":"#raises","text":"403 : Invalid client_id: Authorization Failed 404 : Invalid/Used coupon: The coupon does not exist or has already been used(If used is True)","title":"Raises:"},{"location":"#backend-action","text":"Check client_id and authorize ( 403 if invalid) Query database ( 404 if no record found) Check used field in row ( 404 if used is True) Return 200","title":"Backend Action:"},{"location":"#post-couponused","text":"For turning the used field in database to True after successfully assigning roles","title":"POST /coupon/used"},{"location":"#headers_1","text":"Authorization: client_id","title":"Headers:"},{"location":"#body_1","text":"{ \"coupon\" : <COUPON> }","title":"Body:"},{"location":"#returns_1","text":"200 : Successful","title":"Returns:"},{"location":"#raises_1","text":"403 : Invalid client_id: Authorization Failed 404 : Invalid/Used coupon: The coupon does not exist or has already been used(If used is True)","title":"Raises:"},{"location":"#backend-action_1","text":"Check client_id and authorize ( 403 if invalid) Query database ( 404 if no record found) Check used field in row ( 404 if used is True) Sets used field in the database to True Return 200","title":"Backend Action:"},{"location":"#discord-server-design","text":"The discord server plan where the tournament will be held","title":"Discord Server Design"},{"location":"#roles","text":"","title":"Roles"},{"location":"#staff-structure","text":"Tournament Admins - Have full access/control of server and can create bot preferences Tournament Moderators - Limited Access to the server and will maintain a link between Admins and users","title":"Staff Structure"},{"location":"#general","text":"Community / Verified - Role assigned when a coupon is successfully redeemed Tournament Participant - Role assigned once the user verifies that they want to join the tournament","title":"General"},{"location":"#channels","text":"welcome - Greets the new user and asks them to run the !redeem <coupon> command Access Level - Public (everyone) room-pass-and-id - Channel where the users will be informed about the Access Level - Tournament Participant(Role) Above are the required/mandatory channel(s). Rest are Optional and can be created using Channel Overrides for the Roles","title":"Channels"},{"location":"#bot-interface","text":"Prefix = !","title":"Bot Interface"},{"location":"#commands","text":"help : Shows the bot's commands redeem <coupon> : Grants access to the Community role","title":"Commands"},{"location":"#redeem-ltcoupongt-command","text":"","title":"!redeem &lt;coupon&gt; command"},{"location":"#arguments","text":"coupon: The coupon recieved on the purchase of the product","title":"Arguments:"},{"location":"#returns_2","text":"Assigns role to the user on success","title":"Returns:"},{"location":"#backend-actions","text":"Takes user input Hits the /coupon/verify endpoint with client_id and coupon If successful: Assign Community/Verified Role to the user Hits the /coupon/used endpoint with client_id and coupon","title":"Backend Actions:"}]}